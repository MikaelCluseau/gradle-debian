Description: Set the correct path to locate jnidispatch.so library
Author: Miguel Landaeta <miguel@miguel.cc>
Forwarded: no
Last-Update: 2011-05-23

--- gradle-1.0~m3.orig/subprojects/core/src/main/groovy/org/gradle/logging/LoggingServiceRegistry.java
+++ gradle-1.0~m3/subprojects/core/src/main/groovy/org/gradle/logging/LoggingServiceRegistry.java
@@ -107,7 +107,8 @@ public class LoggingServiceRegistry exte
     protected OutputEventRenderer createOutputEventRenderer() {
         Spec<FileDescriptor> terminalDetector;
         if (detectConsole) {
-            terminalDetector = new TerminalDetector(StartParameter.DEFAULT_GRADLE_USER_HOME);
+            //terminalDetector = new TerminalDetector(StartParameter.DEFAULT_GRADLE_USER_HOME);
+            terminalDetector = new TerminalDetector(new java.io.File("/usr/lib"));
         } else {
             terminalDetector = Specs.satisfyNone();
         }
--- gradle-1.0~m3.orig/subprojects/core/src/main/groovy/org/gradle/logging/internal/TerminalDetector.java
+++ gradle-1.0~m3/subprojects/core/src/main/groovy/org/gradle/logging/internal/TerminalDetector.java
@@ -29,8 +29,9 @@ import java.io.*;
 public class TerminalDetector implements Spec<FileDescriptor> {
     public TerminalDetector(File libCacheDir) {
         // Some hackery to prevent JNA from creating a shared lib in the tmp dir, as it does not clean things up
-        File tmpDir = new File(libCacheDir, "jna");
-        tmpDir.mkdirs();
+        //File tmpDir = new File(libCacheDir, "jna");
+        File tmpDir = new File(libCacheDir, "jni");
+        //tmpDir.mkdirs();
         String libName = System.mapLibraryName("jnidispatch");
         File libFile = new File(tmpDir, libName);
         if (!libFile.exists()) {
