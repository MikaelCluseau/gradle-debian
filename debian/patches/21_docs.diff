Description: Generate javadocs and groovydocs only
 I still have to figure out how to build the rest of the documentation
 using DocBook and other libraries available in Debian.
Author: Miguel Landaeta <miguel@miguel.cc>
Forwarded: no
Last-Update: 2011-05-10

--- gradle-1.0~m3.orig/build.gradle
+++ gradle-1.0~m3/build.gradle
@@ -393,7 +393,7 @@ binDistImage = copySpec {
     from('src/toplevel') {
         expand(version: version)
     }
-    from project(':docs').distDocs.destFile
+    //from project(':docs').distDocs.destFile
     into('bin') {
         from startScriptsDir
         fileMode = 0755
@@ -422,14 +422,16 @@ allDistImage = copySpec {
     }
 }
 
-task allZip(type: Zip, dependsOn: ['launcher:startScripts', 'docs:docs', 'docs:samples']) {
+//task allZip(type: Zip, dependsOn: ['launcher:startScripts', 'docs:docs', 'docs:samples']) {
+task allZip(type: Zip, dependsOn: ['launcher:startScripts', 'docs:docs']) {
     classifier = 'all'
     into(zipRootFolder) {
         with allDistImage
     }
 }
 
-task binZip(type: Zip, dependsOn: ['launcher:startScripts', 'docs:distDocs']) {
+//task binZip(type: Zip, dependsOn: ['launcher:startScripts', 'docs:distDocs']) {
+task binZip(type: Zip, dependsOn: ['launcher:startScripts', 'docs:docs']) {
     classifier = 'bin'
     into(zipRootFolder) {
         with binDistImage
@@ -495,7 +497,8 @@ def guessMaxForks() {
 
 task testedDists(dependsOn: [assemble, check, integTests])
 
-task nightlyBuild(dependsOn: [clean, testedDists, ':docs:uploadDocs'])
+//task nightlyBuild(dependsOn: [clean, testedDists, ':docs:uploadDocs'])
+task nightlyBuild(dependsOn: [clean, testedDists])
 
 task install(type: Install) {
     description = 'Installs the minimal distribution into directory $gradle_installPath'
@@ -579,7 +582,8 @@ task releaseArtifacts {
 task release {
     description = 'Builds, tests and uploads the release artifacts'
     group = 'release'
-    dependsOn releaseVersion, tag, releaseArtifacts, testedDists, uploadArchives, uploadDists, ':docs:uploadDocs'
+    //dependsOn releaseVersion, tag, releaseArtifacts, testedDists, uploadArchives, uploadDists, ':docs:uploadDocs'
+    dependsOn releaseVersion, tag, releaseArtifacts, testedDists, uploadArchives, uploadDists
 }
 
 task wrapper(type: Wrapper) {
--- gradle-1.0~m3.orig/subprojects/docs/docs.gradle
+++ gradle-1.0~m3/subprojects/docs/docs.gradle
@@ -28,6 +28,7 @@ configurations {
     userGuideTask
 }
 
+/*
 dependencies {
     userGuideTask 'xalan:xalan:2.7.1', 'xerces:xercesImpl:2.9.1'
     userGuideTask module('xhtmlrenderer:xhtmlrenderer:R8rc1') {
@@ -37,6 +38,7 @@ dependencies {
 
     userGuideStyleSheets 'docbook:docbook-xsl:1.75.2@zip'
 }
+*/
 
 RemoteLocations remoteLocations = new RemoteLocations(version: version)
 
@@ -94,10 +96,10 @@ task userguideStyleSheets(type: Copy) {
     from(cssSrcDir) {
         include '*.css'
     }
-    from(zipTree(configurations.userGuideStyleSheets.singleFile)) {
-        // Remove the prefix
-        eachFile { fcd -> fcd.path = fcd.path.replaceFirst('^docbook-xsl-[0-9\\.]+/', '') }
-    }
+    //from(zipTree(configurations.userGuideStyleSheets.singleFile)) {
+    //    // Remove the prefix
+    //    eachFile { fcd -> fcd.path = fcd.path.replaceFirst('^docbook-xsl-[0-9\\.]+/', '') }
+    //}
 }
 
 task samplesDocbook(type: AssembleSamplesDocTask) {
@@ -332,7 +334,8 @@ task userguide {
 }
 
 task docs {
-    dependsOn javadoc, groovydoc, userguide, distDocs, samplesDocs, dslHtml
+    //dependsOn javadoc, groovydoc, userguide, distDocs, samplesDocs, dslHtml
+    dependsOn javadoc, groovydoc
     description = 'Generates all documentation'
     group = 'documentation'
 }
