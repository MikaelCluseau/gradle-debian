import java.lang.management.ManagementFactory
import java.math.RoundingMode

/*
* Copyright 2010 the original author or authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
<% if (subprojects.empty ) { %>
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'

repositories {
<% if (repository) { %>
    maven {
        url "${repository.getUri()}"
    }
<% } %>
    mavenCentral()
}

dependencies {
    compile 'commons-lang:commons-lang:2.5'
    compile "commons-httpclient:commons-httpclient:3.0"
    compile "commons-codec:commons-codec:1.2"
    compile "org.slf4j:jcl-over-slf4j:1.6.6"
    compile "org.codehaus.groovy:groovy:1.8.8"
    compile "commons-codec:commons-codec:1.2"
    testCompile 'junit:junit:4.8.2'
    testCompile 'org.testng:testng:6.4'
    runtime 'com.googlecode:reflectasm:1.01'

    <% if (dependencies) { dependencies.each { %>
    compile "${it.shortNotation()}" <% } %>
    <% } %>
}

test {
    jvmArgs '-XX:MaxPermSize=512m', '-XX:+HeapDumpOnOutOfMemoryError'
    testReport = <%=testProject.defaults.testReport%>
    <%=testProject.defaults.testFramework%>
}

<% if (groovyProject) { %>
apply plugin: 'groovy'
dependencies {
    groovy 'org.codehaus.groovy:groovy:1.8.8'
}
<% } %>

<% if (scalaProject) { %>
apply plugin: 'scala'
dependencies {
    scalaTools 'org.scala-lang:scala-compiler:2.9.2'
    compile 'org.scala-lang:scala-library:2.9.2'
}
tasks.withType(ScalaCompile) {
    scalaCompileOptions.with {
        useAnt = false
        fork = true
        forkOptions.jvmArgs = ["-XX:MaxPermSize=512m"]
    }
}
<% } %>

<% if (withPlainAntCompile) { %>
class PlainAntCompile extends DefaultTask{
	File outputDirectoy
	File sourceDirectory
	FileCollection classpath;

	@TaskAction
	void compile(){
		outputDirectoy.mkdirs()
		project.ant {
			property(name:"build.sysclasspath", value:"last")
			path(id:'classpath') {
				pathelement(path:classpath.asPath)
			}
			path(id:'sourcepath') {
				pathelement(location:outputDirectoy.absolutePath)
			}
			presetdef(name: 'antCompileJava') {
				javac(  classpathref:'classpath',
						encoding:'UTF-8',
						destdir:outputDirectoy.absolutePath,
						excludes:'',
						fork:'true',
						memoryInitialSize:'1024m',
						memoryMaximumSize:'1536m',
						source:'1.6',
						srcdir:sourceDirectory.absolutePath,
						target:'1.6')
			}
		}
		project.ant.antCompileJava()
	}
}


task plainAntCompile(type:PlainAntCompile){
	sourceDirectory = file("src/main/java")
	outputDirectoy = file("\$buildDir/classes/main")
	classpath = sourceSets.main.compileClasspath
}

<% } %>

task dependencyReport(type: DependencyReportTask) {
    outputFile = new File(buildDir, "dependencies.txt")
}
<% } %>

if (project == rootProject) {
    gradle.buildFinished {
        def heap = ManagementFactory.memoryMXBean.heapMemoryUsage
        def nonHeap = ManagementFactory.memoryMXBean.nonHeapMemoryUsage
        logger.lifecycle "BEFORE GC"
        logger.lifecycle "heap: \${format(heap.used)} (initial \${format(heap.init)}, commited \${format(heap.committed)}, max \${format(heap.max)}"
        logger.lifecycle "nonHeap: \${format(nonHeap.used)} (initial \${format(nonHeap.init)}, commited \${format(nonHeap.committed)}, max \${format(nonHeap.max)}"

        ManagementFactory.memoryMXBean.gc()
        heap = ManagementFactory.memoryMXBean.heapMemoryUsage
        nonHeap = ManagementFactory.memoryMXBean.nonHeapMemoryUsage
        logger.lifecycle "AFTER GC"
        logger.lifecycle "heap: \${format(heap.used)} (initial \${format(heap.init)}, commited \${format(heap.committed)}, max \${format(heap.max)}"
        logger.lifecycle "nonHeap: \${format(nonHeap.used)} (initial \${format(nonHeap.init)}, commited \${format(nonHeap.committed)}, max \${format(nonHeap.max)}"
        buildDir.mkdirs()
        new File(buildDir, "totalMemoryUsed.txt").text = heap.used
    }
}

def format(def value) {
    value = value / (1024 * 1024)
    value = value.setScale(4, RoundingMode.DOWN)
    return "\${value}MB"
}
