/*
 * Copyright 2010 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.gradle.build.Install
import org.gradle.build.TestReportAggregator

/**
 * For building Gradle you usually don't need to specify any properties. Only certain functionality of the Gradle requires
 * setting certain properties. Those properties can be set in the gradle.properties file in the the gradle user home. The
 * following properties can be set:
 *
 * Uploading distributions to Gradle's release and snapshot repository at codehaus: artifactoryUserName, artifactoryUserPassword
 */

defaultTasks 'assemble'
apply plugin: 'java-base'
archivesBaseName = 'gradle'
apply from: "gradle/versioning.gradle"

ext {
    versions = [
        commons_io: 'commons-io:commons-io:1.4'
    ]
    libraries = [
        ant: dependencies.module('org.apache.ant:ant:1.8.4') {
            dependency 'org.apache.ant:ant-launcher:1.8.4@jar'
        },
        asm: 'asm:asm-all:3.3.1@jar',
        commons_cli: 'commons-cli:commons-cli:1.2@jar',
        commons_io: dependencies.module(versions.commons_io),
        commons_lang: 'commons-lang:commons-lang:2.6@jar',
        commons_collections: 'commons-collections:commons-collections:3.2.1@jar',
        ivy: dependencies.module('org.apache.ivy:ivy:2.2.0'){
            dependency "com.jcraft:jsch:0.1.46"
        },
        jcip: "net.jcip:jcip-annotations:1.0@jar",
    ]

}

// Logging
libraries.slf4j_api = 'org.slf4j:slf4j-api:1.6.6@jar'
libraries.jcl_to_slf4j = dependencies.module('org.slf4j:jcl-over-slf4j:1.6.6') {
    dependency libraries.slf4j_api
}
libraries.jul_to_slf4j = dependencies.module('org.slf4j:jul-to-slf4j:1.6.6') {
    dependency libraries.slf4j_api
}
libraries.log4j_to_slf4j = dependencies.module('org.slf4j:log4j-over-slf4j:1.6.6') {
    dependency libraries.slf4j_api
}
libraries.logback_core = 'ch.qos.logback:logback-core:1.0.6@jar'
libraries.logback_classic = dependencies.module('ch.qos.logback:logback-classic:1.0.6') {
    dependency libraries.logback_core
    dependency libraries.slf4j_api
}

// Jetty
libraries.servlet_api = "org.mortbay.jetty:servlet-api:2.5-20081211@jar"
libraries.jetty_util = dependencies.module("org.mortbay.jetty:jetty-util:6.1.25") {
    dependency libraries.slf4j_api
    dependency libraries.servlet_api
}
libraries.jetty = dependencies.module("org.mortbay.jetty:jetty:6.1.25") {
    dependency libraries.jetty_util
    dependency libraries.servlet_api
}

libraries.commons_httpclient = dependencies.module('org.apache.httpcomponents:httpclient:4.2.1') {
    dependency "org.apache.httpcomponents:httpcore:4.2.1@jar"
    dependency libraries.jcl_to_slf4j
    dependency "commons-codec:commons-codec:1.6@jar"
    dependency "org.samba.jcifs:jcifs:1.3.17"
}

libraries.maven_ant_tasks = dependencies.module("org.apache.maven:maven-ant-tasks:2.1.3") {
    libraries.ant
}

libraries += [
        ant_junit: 'org.apache.ant:ant-junit:1.8.4@jar',
        ant_antlr: 'org.apache.ant:ant-antlr:1.8.4@jar',
        antlr: 'antlr:antlr:2.7.7@jar',
        dom4j: 'dom4j:dom4j:1.6.1@jar',
        guava: 'com.google.guava:guava:11.0.2@jar',
        jsr305: 'com.google.code.findbugs:jsr305:1.3.9',
        groovy: 'org.codehaus.groovy:groovy-all:1.8.6@jar',
        jaxen: 'jaxen:jaxen:1.1@jar',
        jcip: "net.jcip:jcip-annotations:1.0",
        jna: 'net.java.dev.jna:jna:3.2.7@jar',
        junit: 'junit:junit:4.10',
        xmlunit: 'xmlunit:xmlunit:1.3',
        nekohtml: 'net.sourceforge.nekohtml:nekohtml:1.9.14'
]

libraries.maven3_settings_builder = dependencies.module("org.apache.maven:maven-settings-builder:3.0.4") {
    dependency "org.apache.maven:maven-settings:3.0.4@jar"
    dependency "org.codehaus.plexus:plexus-utils:2.0.6@jar"
    dependency "org.codehaus.plexus:plexus-interpolation:1.14@jar"
    dependency "org.codehaus.plexus:plexus-component-annotations:1.5.5@jar"
    dependency "org.sonatype.plexus:plexus-cipher:1.4@jar"
    dependency "org.sonatype.plexus:plexus-sec-dispatcher:1.3@jar"
}

libraries.spock = ['org.spockframework:spock-core:0.6-groovy-1.8@jar',
        libraries.groovy,
        'org.objenesis:objenesis:1.2',
        'cglib:cglib-nodep:2.2']
libraries.jmock = ['org.jmock:jmock:2.5.1',
        'org.hamcrest:hamcrest-core:1.1',
        'org.hamcrest:hamcrest-library:1.1',
        dependencies.create('org.jmock:jmock-junit4:2.5.1') { exclude group: 'junit', module: 'junit-dep' }, //junit-dep pulls old definitions of core junit types.
        'org.jmock:jmock-legacy:2.5.1',
        'org.objenesis:objenesis:1.2',
        'cglib:cglib-nodep:2.2']

allprojects {
    group = 'org.gradle'

    plugins.withType(JavaPlugin) {
        sourceCompatibility = 1.5
        targetCompatibility = 1.5
    }

    repositories {
        maven { url 'http://repo.gradle.org/gradle/libs' }
        maven { url 'http://repository.codehaus.org/' }
    }

    version = this.version

    apply from: "$rootDir/gradle/conventions-dsl.gradle"

    ext {
        isDevBuild = {
            gradle.taskGraph.hasTask(developerBuild)
        }

        isCIBuild = {
            gradle.taskGraph.hasTask(ciBuild)
        }

        isCommitBuild = {
            gradle.taskGraph.hasTask(commitBuild)
        }
    }
}

configure(groovyProjects()) {
    apply from: "$rootDir/gradle/groovyProject.gradle"
}

configure(publishedProjects()) {
    apply from: "$rootDir/gradle/publish.gradle"
}

allprojects {
    apply from: "$rootDir/gradle/codeQuality.gradle"
    apply from: "$rootDir/gradle/testWithUnknownOS.gradle"
}

apply from: "gradle/idea.gradle"
apply from: "gradle/eclipse.gradle"

configurations {
    dists
    runtime {
        visible = false
    }
    plugins {
        visible = false
    }
    testRuntime {
        extendsFrom runtime
        extendsFrom plugins
    }
}

dependencies {
    runtime project(':launcher')
    plugins pluginProjects()
    plugins project(':coreImpl')
}

evaluationDependsOn(':docs')
evaluationDependsOn(':integTest')

clean.dependsOn subprojects.collect { "$it.path:clean" }

task check(overwrite: true, dependsOn: groovyProjects()*.check)
check.dependsOn ':docs:checkstyleApi'
configure(groovyProjects()) {
    check.dependsOn ":docs:checkstyleApi"
}

task test(overwrite: true, dependsOn: groovyProjects()*.test)
task uploadArchives(dependsOn: publishedProjects()*.uploadArchives)
task publishLocalArchives(dependsOn: publishedProjects()*.publishLocalArchives)

task aggregateTestReports(type: TestReportAggregator) {
    testReportDir = reporting.file("tests")
    testResultsDir = file("${buildDir}/test-results")
    projects = subprojects
}

task determineCommitId {
    ext.commitId = null

    doLast {
        def strategies = []

        def env = System.getenv()

        // Builds of Gradle happening on the CI server
        strategies << {
            env["BUILD_VCS_NUMBER"]
        }

        // For the discovery builds, this points to the Gradle revision
        strategies << {
            env.find { it.key.startsWith("BUILD_VCS_NUMBER_Gradle_Master") }?.value
        }

        // If it's a checkout, ask Git for it
        strategies << {
            if (file(".git").exists()) {
                def baos = new ByteArrayOutputStream()
                exec {
                    executable "git"
                    args "log", "-1", "--format=%H"
                    standardOutput = baos
                }
                new String(baos.toByteArray(), "utf8").trim()
            } else {
                null
            }
        }

        for (strategy in strategies) {
            commitId = strategy()
            if (commitId) {
                break
            }
        }
        if (!commitId) {
            throw new InvalidUserDataException("Could not determine commit id")
        }
    }
}

task createBuildReceipt(dependsOn: determineCommitId) {
    ext.receiptFile = file("$buildDir/build-receipt.properties")
    outputs.file receiptFile
    outputs.upToDateWhen { false }
    doLast {
        def data = [
            commitId:  determineCommitId.commitId,
            versionNumber: version,
            buildTimestamp: buildTimestamp,
            username: System.properties["user.name"],
            hostname: InetAddress.localHost.hostName,
            javaVersion: System.properties["java.version"],
            osName: System.properties["os.name"],
            osVersion: System.properties["os.version"]
        ]

        receiptFile.parentFile.mkdirs()

        // We write this out ourself instead of using the properties class to avoid the
        // annoying timestamp that insists on placing in there, that throws out incremental.
        def content = data.entrySet().collect { "$it.key=$it.value" }.sort().join("\n")
        receiptFile.setText(content, "ISO-8859-1")
    }
}

ext.zipRootFolder = "$archivesBaseName-${-> version}"

ext.binDistImage = copySpec {
    from('src/toplevel') {
        exclude 'media/**'
        expand(version: version)
    }
    from('src/toplevel') {
        include 'media/**'
    }
    from project(':docs').outputs.distDocs
    into('bin') {
        from { project(':launcher').startScripts.outputs.files }
        fileMode = 0755
    }
    into('lib') {
        from configurations.runtime
        into('plugins') {
            from configurations.plugins - configurations.runtime
        }
    }
}

ext.allDistImage = copySpec {
    with binDistImage
    into('src') {
        from groovyProjects().collect {project -> project.sourceSets.main.allSource }
    }
    into('docs') {
        from project(':docs').outputs.docs
    }
    into('samples') {
        from project(':docs').outputs.samples
    }
}

task allZip(type: Zip) {
    classifier = 'all'
    into(zipRootFolder) {
        with allDistImage
    }
}

task binZip(type: Zip) {
    classifier = 'bin'
    into(zipRootFolder) {
        with binDistImage
    }
}

task srcZip(type: Zip) {
    classifier = 'src'
    into(zipRootFolder) {
        from('gradlew') {
            fileMode = 0755
        }
        from(projectDir) {
            def spec = delegate
            ['buildSrc', 'subprojects/*'].each {
                spec.include "$it/*.gradle"
                spec.include "$it/src/"
            }
            include 'config/'
            include 'gradle/'
            include 'src/'
            include '*.gradle'
            include 'wrapper/'
            include 'gradlew.bat'
        }
    }
}

task outputsZip(type: Zip) {
    archiveName "outputs.zip"
    from(createBuildReceipt)
    ["all", "bin", "src"].each { from(tasks["${it}Zip"]) }
}

artifacts {
    dists allZip, binZip, srcZip
}

task intTestImage(type: Sync) {
    dependsOn "launcher:startScripts"
    with binDistImage
    ext.integTestGradleHome = file("$buildDir/integ test")
    into integTestGradleHome
    doLast { task ->
        ant.chmod(dir: "$integTestGradleHome/bin", perm: "ugo+rx", includes: "**/*")
    }
}

def guessMaxForks(project) {
    if (project.hasProperty("maxParallelForks")) {
        return Integer.valueOf(project.getProperty("maxParallelForks"))
    }
    int processors = Runtime.runtime.availableProcessors()
    return Math.max(2, (int) (processors / 2))
}

task install(type: Install) {
    description = 'Installs the minimal distribution into directory $gradle_installPath'
    group = 'build'
    dependsOn binZip.taskDependencies
    with binDistImage
    installDirPropertyName = 'gradle_installPath'
}

task installAll(type: Install) {
    description = 'Installs the full distribution into directory $gradle_installPath'
    group = 'build'
    dependsOn allZip.taskDependencies
    with allDistImage
    installDirPropertyName = 'gradle_installPath'
}

task testedDists(dependsOn: [check]) {
    outputs.files configurations.dists.allArtifacts.files
}

gradle.taskGraph.whenReady {graph ->
    if (graph.hasTask(uploadArchives)) {
        // check properties defined and fail early
        artifactoryUserName
        artifactoryUserPassword
    }
}

task quickCheck {
    def i = gradle.startParameter.taskNames.findIndexOf { it ==~ /(?i):?(quickCheck|qC)/ }
    if (i >= 0) {
        gradle.startParameter.taskNames.addAll(i, ["doc:checkstyleApi", "codeQuality", "classes", "test"])
    }
    doFirst {
        if (i < 0) {
            throw new GradleException("Due to the way it is implemented, the 'quickCheck' task has to be invoked directly, and its name can only be abbreviated to 'qC'.")
        }
    }
}

task developerBuild {
    description = 'Builds distributions and runs pre-checkin checks'
    group = 'build'
    dependsOn testedDists
}

task ciBuild {
    description = 'Full build performed by the CI server'
    dependsOn clean, testedDists
}

task commitBuild {
    description = 'Commit build performed by the CI server'
    dependsOn testedDists
}

task verifyIsProductionBuildEnvironment << {
    assert Jvm.current().isJava7() : "Must use a Java 7 compatible JVM to perform this build. Current JVM is ${Jvm.current()}"
    def systemCharset = java.nio.charset.Charset.defaultCharset().name()
    assert systemCharset == "UTF-8" : "Platform encoding must be UTF-8. Is currently $systemCharset. Set -Dfile.encoding=UTF-8."
}

gradle.taskGraph.whenReady {graph ->
    if (graph.hasTask(ciBuild)) {
        subprojects { reporting.baseDir "$rootProject.reporting.baseDir/${path.replaceFirst(':', '').replaceAll(':', '.')}" }
    }
}

def wrapperUpdateTask = { name, label ->
    task "${name}Wrapper"(type: Wrapper) {
        doFirst {
            def version = new groovy.json.JsonSlurper().parseText(new URL("http://services.gradle.org/versions/$label").text)
            if (version.empty) {
                throw new GradleException("Cannot update wrapper to '${label}' version as there is currently no version of that label")
            }
            println "updating wrapper to $label version: $version.version (downloadUrl: $version.downloadUrl)"
            distributionUrl version.downloadUrl
        }
        doLast {
            def jvmOpts = "-Xmx1024m -XX:MaxPermSize=256m -Dfile.encoding=UTF-8"
            inputs.property("jvmOpts", jvmOpts)
            def optsEnvVar = "DEFAULT_JVM_OPTS"
            scriptFile.write scriptFile.text.replace("$optsEnvVar=\"\"", "$optsEnvVar=\"$jvmOpts\"")
            batchScript.write batchScript.text.replace("set $optsEnvVar=", "set $optsEnvVar=$jvmOpts")
        }
    }
}

wrapperUpdateTask("nightly", "nightly")
wrapperUpdateTask("rc", "release-candidate")
wrapperUpdateTask("current", "current")

def groovyProjects() {
    subprojects.findAll { !(it.name in ["docs"]) }
}

def publishedProjects() {
    [project(':core'), project(':toolingApi'), project(':wrapper'), project(':baseServices'), project(':messaging')]
}

def pluginProjects() {
    ['plugins', 'codeQuality', 'jetty', 'antlr', 'wrapper', 'osgi', 'maven', 'ide', 'announce', 'scala', 'sonar', 'signing', 'cpp', 'ear', 'javascript'].collect {
        project(it)
    }
}

